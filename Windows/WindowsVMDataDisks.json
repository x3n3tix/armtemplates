{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the VM"
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Size of the VM"
      }
    },
    "availabilitySet": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the availability set if defined"
      }
    },
    "dataDisks": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of datadisks to add to VM at deployment (ie, [[512,Premium_LRS],[2048,Standard_LRS]] would add 2 datadisks, 1 at 512GB and Premium_LRS storage type, and 1 at 2TB and Standard_LRS storage type. )"
      }
    },
    "vmLocation": {
      "type": "string",
      "allowedValues": [
        "Australia East",
        "australiaeast",
        "Australia Southeast",
        "australiasoutheast",
        "West US 2",
        "westus2"
      ],
      "metadata": {
        "description": "Location of the resources"
      }
    },
    "tagAutoShutdownSchedule": {
      "defaultValue": "N/A",
      "type": "string",
      "metadata": {
        "description": "Tag for automatic shutdown and deallocation of VM"
      }
    },
    "tagAutoRestartSchedule": {
      "defaultValue": "N/A",
      "type": "string",
      "metadata": {
        "description": "Tag for automatic restart of VM"
      }
    },
    "osImage": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "URI to custom image if any"
      }
    },
    "osDiskSize": {
      "defaultValue": "128",
      "type": "string",
      "metadata": {
        "description": "Size of the OS Disk (in GB)"
      }
    },
    "storageType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "metadata": {
        "description": "Storage type for VM (ie. Standard_LRS, Premium_LRS, etc.)"
      }
    },
    "existingVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing VNET"
      }
    },
    "existingVirtualNetworkResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing VNET resource group"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the subnet in the virtual network you want to use"
      }
    },
    "nicSuffix": {
      "type": "string",
      "metadata": {
        "description": "Suffix for the NIC (ie. 001, 0001)"
      }
    },
    "adminUserName": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring"
    },
    "diagStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Boot Diag Storage Account to use during deployment"
      }
    },
    "diagExtensionVersion": {
      "type": "string",
      "defaultValue": "1.5",
      "metadata": {
        "description": "Version of the VM Diagnostics extension (ie. 1.5 for Windows or 2.3 for Linux)"
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the KeyVault for certificate"
      }
    },
    "keyVaultResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource group of the KeyVault"
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "description": "Object with list of tags to add onto the NIC and VM"
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "OMS workspace ID"
      }
    },
    "workspaceName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "OMS workspace name"
      }
    },
    "workspaceKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "OMS workspace key"
      }
    },
    "certificateUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Url of the certificate with version in KeyVault e.g. https://testault.vault.azure.net/secrets/testcert/b621es1db241e56a72d037479xab1r7"
      }
    },
    "storageSASToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "SAS Token for accessing private source control"
      }
    },
    "scriptUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Url of the custom script to be run."
      }
    },
    "scriptName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the custom script to be run."
      }
    },
    "scriptCommand": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Command to run with custom script"
      }
    },
    "osPublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer",
      "metadata": {
        "description": "OS Publisher of Marketplace image."
      }
    },
    "osOffer": {
      "type": "string",
      "defaultValue": "WindowsServer",
      "metadata": {
        "description": "Offer of Marketplace image."
      }
    },
    "osSKU": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "metadata": {
        "description": "SKU to use for Marketplace image"
      }
    },
    "osVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "Version to use for Marketplace image"
      }
    },
    "domainJoinUserName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Domain NetBiosName plus User name of a domain user with sufficient rights to perfom domain join operation. E.g. domain\\username"
      }
    },
    "domainJoinPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Domain user password"
      }
    },
    "domainFQDN": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Domain FQDN where the virtual machine will be joined"
      }
    },
    "ouPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies an organizational unit (OU) for the domain account. Enter the full distinguished name of the OU in quotation marks. Example: OU=testOU,DC=domain,DC=Domain,DC=com"
      }
    },
    "joinDomain": {
      "type": "string",
      "defaultValue": "false",
      "metadata": {
        "description": "Flag to determine whether to join VM to domain. Default is 'true'."
      }
    },
    "loadBalancer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Load Balancer to attach NIC to."
      }
    },
    "backendPool": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Backend Address Pool to use."
      }
    }
  },
  "variables": {
    "nicName": "[concat(parameters('vmName'), '-NIC-', parameters('nicSuffix'))]",
    "api-version": "2015-06-15",
    "vnetID": "[resourceId(parameters('existingVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('existingVirtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('subnetName'))]",
    "keyVaultURL": "[concat('https://', parameters('keyVaultName'), '.vault.azure.net/')]",
    "keyVaultResourceID": "[concat(subscription().id,'/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]",
    "resourceId": "[resourceGroup().id]",
    "accountid": "[concat(variables('resourceId'),'/providers/Microsoft.Storage/storageAccounts/', parameters('diagStorageAccountName'))]",
    "metricsresourceid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/','Microsoft.Compute/virtualMachines/',parameters('vmName'))]",
    "wadlogs": "<WadCfg> <DiagnosticMonitorConfiguration overallQuotaInMB=\"4096\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration\"> <DiagnosticInfrastructureLogs scheduledTransferLogLevelFilter=\"Error\"/> <WindowsEventLog scheduledTransferPeriod=\"PT1M\" > <DataSource name=\"Application!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"Security!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"System!*[System[(Level = 1 or Level = 2)]]\" /></WindowsEventLog>",
    "wadperfcounters": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT60S\" unit=\"Percent\"><annotation displayName=\"CPU utilization\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Privileged Time\" sampleRate=\"PT60S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% User Time\" sampleRate=\"PT60S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Processor Frequency\" sampleRate=\"PT60S\" unit=\"Count\"><annotation displayName=\"CPU frequency\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Processes\" sampleRate=\"PT60S\" unit=\"Count\"><annotation displayName=\"Processes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Thread Count\" sampleRate=\"PT60S\" unit=\"Count\"><annotation displayName=\"Threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Handle Count\" sampleRate=\"PT60S\" unit=\"Count\"><annotation displayName=\"Handles\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\% Committed Bytes In Use\" sampleRate=\"PT60S\" unit=\"Percent\"><annotation displayName=\"Memory usage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT60S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT60S\" unit=\"Bytes\"><annotation displayName=\"Memory committed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Commit Limit\" sampleRate=\"PT60S\" unit=\"Bytes\"><annotation displayName=\"Memory commit limit\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Time\" sampleRate=\"PT60S\" unit=\"Percent\"><annotation displayName=\"Disk active time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Read Time\" sampleRate=\"PT60S\" unit=\"Percent\"><annotation displayName=\"Disk active read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Write Time\" sampleRate=\"PT60S\" unit=\"Percent\"><annotation displayName=\"Disk active write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Transfers/sec\" sampleRate=\"PT60S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Reads/sec\" sampleRate=\"PT60S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk read operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Writes/sec\" sampleRate=\"PT60S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk write operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Bytes/sec\" sampleRate=\"PT60S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Read Bytes/sec\" sampleRate=\"PT60S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Write Bytes/sec\" sampleRate=\"PT60S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\LogicalDisk(_Total)\\% Free Space\" sampleRate=\"PT60S\" unit=\"Percent\"><annotation displayName=\"Disk free space (percentage)\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "wadmetrics": "[concat('<Metrics resourceId=\"',variables('metricsresourceid'),'\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
    "wadcfgx": "[concat(variables('wadlogs'),variables('wadperfcounters'),variables('wadmetrics'))]",
    "certUsed": {
      "True": {
        "computerName": "[parameters('vmName')]",
        "adminUsername": "[parameters('adminUsername')]",
        "adminPassword": "[parameters('adminPassword')]",
        "secrets": [
          {
            "sourceVault": {
              "id": "[variables('keyVaultResourceID')]"
            },
            "vaultCertificates": [
              {
                "certificateUrl": "[parameters('certificateUrl')]",
                "certificateStore": "My"
              }
            ]
          }
        ],
        "windowsConfiguration": {
          "provisionVMAgent": true,
          "winRM": {
            "listeners": [
              {
                "protocol": "Http"
              },
              {
                "protocol": "Https",
                "certificateUrl": "[parameters('certificateUrl')]"
              }
            ]
          }
        }
      },
      "False": {
        "computerName": "[parameters('vmName')]",
        "adminUsername": "[parameters('adminUsername')]",
        "adminPassword": "[parameters('adminPassword')]"
      }
    },
    "windowsConfig": "[variables('certUsed')[string(not(empty(parameters('certificateUrl'))))]]",
    "availabilitySet": {
      "id": "[resourceId('Microsoft.Compute/availabilitySets',parameters('availabilitySet'))]"
    },
    "imageUsed": {
      "True": {
        "id": "[parameters('osImage')]"
      },
      "False": {
        "publisher": "[parameters('osPublisher')]",
        "offer": "[parameters('osOffer')]",
        "sku": "[parameters('osSKU')]",
        "version": "[parameters('osVersion')]"
      }
    },
    "imageConfig": "[variables('imageUsed')[string(not(empty(parameters('osImage'))))]]",
    "domainJoinOptions": 3,
    "loadBalancerBackendAddressPools": [
      {
        "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancer')), '/backendAddressPools/', parameters('backendPool'))]"
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "apiVersion": "[variables('api-version')]",
      "location": "[parameters('vmLocation')]",
      "tags": {
        "DisplayName": "PrivateIPAddress",
        "BillingIdentifier": "[parameters('tags').BillingIdentifier]",
        "BusinessService": "[parameters('tags').BusinessService]",
        "ProjectIdentifier": "[parameters('tags').ProjectIdentifier]",
        "ResourceEndDate": "[parameters('tags').ResourceEndDate]",
        "SupportIdentifier": "[parameters('tags').SupportIdentifier]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": "[if(not(empty(parameters('backendPool'))), variables('loadBalancerBackendAddressPools'), json('null'))]"
            }
          }
        ],
        "dnsSettings": {
          "dnsServers": []
        },
        "enableIPForwarding": false
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "apiVersion": "2016-04-30-preview",
      "location": "[parameters('vmLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "tags": {
        "DisplayName": "VirtualMachine",
        "AutoShutdownSchedule": "[parameters('tagAutoShutdownSchedule')]",
        "AutoRestartSchedule": "[parameters('tagAutoRestartSchedule')]",
        "BillingIdentifier": "[parameters('tags').BillingIdentifier]",
        "BusinessService": "[parameters('tags').BusinessService]",
        "BYOSoftwareLicense": "[parameters('tags').BYOSoftwareLicense]",
        "ProjectIdentifier": "[parameters('tags').ProjectIdentifier]",
        "ResourceEndDate": "[parameters('tags').ResourceEndDate]",
        "SupportIdentifier": "[parameters('tags').SupportIdentifier]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "availabilitySet": "[if(not(empty(parameters('availabilitySet'))), variables('availabilitySet'), json('null'))]",
        "storageProfile": {
          "imageReference": "[variables('imageConfig')]",
          "osDisk": {
            "name": "[concat(parameters('vmName'), '-VHD-OSDISK-', uniqueString(resourceGroup().id,deployment().name))]",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "diskSizeGB": "[if(not(empty(parameters('osDiskSize'))), parameters('osDiskSize'), json('null'))]",
            "managedDisk": {
              "storageAccountType": "[parameters('storageType')]"
            }
          },
          "copy": [
            {
              "name": "dataDisks",
              "count": "[length(parameters('dataDisks'))]",
              "input": {
                "lun": "[copyIndex('dataDisks')]",
                "name": "[concat(parameters('vmName'), '-VHD-DATADISK-00', copyIndex('dataDisks'))]",
                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')][0]]",
                "createOption": "Empty",
                "caching": "ReadWrite",
                "managedDisk": {
                  "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')][1]]"
                }
              },
              "tags": {
                "DisplayName": "DataDisk",
                "BillingIdentifier": "[parameters('tags').BillingIdentifier]",
                "BusinessService": "[parameters('tags').BusinessService]",
                "ProjectIdentifier": "[parameters('tags').ProjectIdentifier]",
                "ResourceEndDate": "[parameters('tags').ResourceEndDate]",
                "SupportIdentifier": "[parameters('tags').SupportIdentifier]"
              }
            }
          ]
        },
        "osProfile": "[variables('windowsConfig')]",
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', parameters('diagStorageAccountName')), '2016-01-01').primaryEndpoints.blob)]"
          }
        }
      },
      "resources": [
        {
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
          ],
          "condition": "[greater(length(parameters('workspaceId')),6)]",
          "type": "extensions",
          "name": "OMSExtension",
          "apiVersion": "[variables('api-version')]",
          "location": "[parameters('vmLocation')]",
          "properties": {
            "publisher": "Microsoft.EnterpriseCloud.Monitoring",
            "type": "MicrosoftMonitoringAgent",
            "typeHandlerVersion": "1.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "workspaceId": "[parameters('workspaceId')]"
            },
            "protectedSettings": {
              "workspaceKey": "[parameters('workspaceKey')]"
            }
          }
        },
        {
          "comments": "Join domain - JsonADDomainExtension",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
            "[resourceId('Microsoft.Compute/virtualMachines/extensions',  parameters('vmName'), 'OMSExtension')]"
          ],
          "condition": "[equals(toLower(parameters('joinDomain')), 'true')]",
          "type": "extensions",
          "name": "JoinToDomain",
          "apiVersion": "[variables('api-version')]",
          "location": "[parameters('vmLocation')]",
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "JsonADDomainExtension",
            "typeHandlerVersion": "1.3",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "Name": "[parameters('domainFQDN')]",
              "User": "[concat(parameters('domainFQDN'),'\\',parameters('domainJoinUserName'))]",
              "Restart": "true",
              "Options": "[variables('domainJoinOptions')]",
              "OUPath": "[parameters('ouPath')]"
            },
            "protectedSettings": {
              "Password": "[parameters('domainJoinPassword')]"
            }
          }
        },
        {
          "type": "extensions",
          "name": "NetworkWatcherAgent",
          "apiVersion": "[variables('api-version')]",
          "location": "[parameters('vmLocation')]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.NetworkWatcher",
            "type": "NetworkWatcherAgentWindows",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true
          }
        },
        {
          "type": "extensions",
          "name": "InstallWinRMExtension",
          "apiVersion": "[variables('api-version')]",
          "location": "[parameters('vmLocation')]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
          ],
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "settings": {
              "fileUris": [
                "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/201-vm-winrm-windows/ConfigureWinRM.ps1",
                "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/201-vm-winrm-windows/makecert.exe",
                "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/201-vm-winrm-windows/winrmconf.cmd"
              ],
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -file ConfigureWinRM.ps1 ',parameters('vmName'))]"
            }
          }
        },
        {
          "type": "extensions",
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "apiVersion": "2015-05-01-preview",
          "location": "[parameters('vmLocation')]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "[parameters('diagExtensionVersion')]",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(variables('wadcfgx'))]",
              "StorageAccount": "[parameters('diagStorageAccountName')]"
            },
            "protectedSettings": {
              "storageAccountName": "[parameters('diagStorageAccountName')]",
              "storageAccountKey": "[listKeys(variables('accountid'),'2015-05-01-preview').key1]",
              "storageAccountEndPoint": "https://core.windows.net/"
            }
          }
        }
      ]
    },
    {
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
      ],
      "type": "Microsoft.Resources/deployments",
      "name": "[concat(parameters('vmName'),'.updateNIC')]",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "https://raw.githubusercontent.com/x3n3tix/armtemplates/master/updateNIC.json",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nicName": {
            "value": "[variables('nicName')]"
          },
          "SubnetRef": {
            "value": "[variables('subnetRef')]"
          },
          "privateIp": {
            "value": "[reference(resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))).ipConfigurations[0].properties.privateIPAddress]"
          }
        }
      }
    },
    {
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
      ],
      "condition": "[not(empty(parameters('scriptUri')))]",
      "type": "Microsoft.Resources/deployments",
      "name": "[concat(parameters('vmName'),'.customScript')]",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "https://raw.githubusercontent.com/x3n3tix/armtemplates/dev/CustomScriptExtension.json",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[parameters('vmName')]"
          },
          "vmLocation": {
            "value": "[parameters('vmLocation')]"
          },
          "extensionPublisher": {
            "value": "Microsoft.Compute"
          },
          "extensionVersion": {
            "value": "1.9"
          },
          "scriptUri": {
            "value": "[parameters('scriptUri')]"
          },
          "scriptName": {
            "value": "[parameters('scriptName')]"
          },
          "scriptCommand": {
            "value": "[parameters('scriptCommand')]"
          }
        }
      }
    }
  ]
}
